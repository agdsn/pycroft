import datetime
import typing as t
from . import processors as processors
from _typeshed import Incomplete
from collections.abc import Generator

class Model: ...

class FixedOffset(datetime.tzinfo):
    def __init__(self, offset: int = ..., name: Incomplete | None = ...) -> None: ...
    @t.override
    def utcoffset(self, dt): ...
    @t.override
    def dst(self, dt): ...
    @t.override
    def tzname(self, dt): ...

class DateTime(datetime.datetime, Model):
    def __new__(cls, *args, **kwargs): ...

class Date(datetime.date, Model):
    def __new__(cls, *args, **kwargs): ...

class Amount(Model):
    amount: Incomplete
    currency: Incomplete
    def __init__(self, amount, status, currency: Incomplete | None = ..., **kwargs) -> None: ...

class SumAmount(Amount):
    number: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class Balance(Model):
    status: Incomplete
    amount: Incomplete
    date: Incomplete
    def __init__(self, status: Incomplete | None = ..., amount: Incomplete | None = ..., date: Incomplete | None = ..., **kwargs) -> None: ...

class Transactions(t.Sequence):
    DEFAULT_PROCESSORS: Incomplete
    processors: Incomplete
    tags: Incomplete
    transactions: Incomplete
    data: Incomplete
    def __init__(self, processors: Incomplete | None = ..., tags: Incomplete | None = ...) -> None: ...
    @property
    def currency(self): ...
    @staticmethod
    def defaultTags(): ...
    @classmethod
    def strip(cls, lines) -> Generator[Incomplete, None, None]: ...
    @classmethod
    def normalize_tag_id(cls, tag_id): ...
    def sanatize_tag_id_matches(self, matches) -> Generator[Incomplete, None, None]: ...
    def parse(self, data): ...
    @t.override
    def __getitem__(self, key): ...
    @t.override
    def __len__(self) -> int: ...

class Transaction(Model):
    transactions: Incomplete
    data: Incomplete
    def __init__(self, transactions, data: Incomplete | None = ...) -> None: ...
    def update(self, data) -> None: ...
