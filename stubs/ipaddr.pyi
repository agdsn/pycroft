from collections.abc import Generator
from typing import Any

long = int
xrange = range
IPV4LENGTH: int
IPV6LENGTH: int

class AddressValueError(ValueError): ...
class NetmaskValueError(ValueError): ...

def IPAddress(address, version: Any | None = ...): ...
def IPNetwork(address, version: Any | None = ..., strict: bool = ...): ...
def v4_int_to_packed(address): ...
def v6_int_to_packed(address): ...
def summarize_address_range(first, last): ...
def collapse_address_list(addresses): ...
CollapseAddrList = collapse_address_list
Bytes = bytes

# class Bytes(str): ...

def get_mixed_type_key(obj): ...

class _IPAddrBase:
    def __index__(self): ...
    def __int__(self): ...
    def __hex__(self): ...
    @property
    def exploded(self): ...
    @property
    def compressed(self): ...

class _BaseIP(_IPAddrBase):
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __hash__(self): ...
    @property
    def version(self) -> None: ...

class _BaseNet(_IPAddrBase):
    def __init__(self, address) -> None: ...
    def iterhosts(self) -> Generator[Any, None, None]: ...
    def __iter__(self): ...
    def __getitem__(self, n): ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def __contains__(self, other): ...
    def overlaps(self, other): ...
    @property
    def network(self): ...
    @property
    def broadcast(self): ...
    @property
    def hostmask(self): ...
    @property
    def with_prefixlen(self): ...
    @property
    def with_netmask(self): ...
    @property
    def with_hostmask(self): ...
    @property
    def numhosts(self): ...
    @property
    def version(self) -> None: ...
    @property
    def prefixlen(self): ...
    def address_exclude(self, other): ...
    def compare_networks(self, other): ...
    def iter_subnets(self, prefixlen_diff: int = ..., new_prefix: Any | None = ...) -> Generator[Any, None, None]: ...
    def masked(self): ...
    def subnet(self, prefixlen_diff: int = ..., new_prefix: Any | None = ...): ...
    def supernet(self, prefixlen_diff: int = ..., new_prefix: Any | None = ...): ...
    Subnet: Any
    Supernet: Any
    AddressExclude: Any
    CompareNetworks: Any
    Contains: Any

class _BaseV4:
    def __init__(self, address) -> None: ...
    @property
    def max_prefixlen(self): ...
    @property
    def packed(self): ...
    @property
    def version(self): ...
    @property
    def is_reserved(self): ...
    @property
    def is_private(self): ...
    @property
    def is_multicast(self): ...
    @property
    def is_unspecified(self): ...
    @property
    def is_loopback(self): ...
    @property
    def is_link_local(self): ...

class IPv4Address(_BaseV4, _BaseIP):
    def __init__(self, address) -> None: ...

class IPv4Network(_BaseV4, _BaseNet):
    ip: Any
    netmask: Any
    iterhosts: Any
    def __init__(self, address, strict: bool = ...) -> None: ...
    IsRFC1918: Any
    IsMulticast: Any
    IsLoopback: Any
    IsLinkLocal: Any

class _BaseV6:
    def __init__(self, address) -> None: ...
    @property
    def max_prefixlen(self): ...
    @property
    def packed(self): ...
    @property
    def version(self): ...
    @property
    def is_multicast(self): ...
    @property
    def is_reserved(self): ...
    @property
    def is_unspecified(self): ...
    @property
    def is_loopback(self): ...
    @property
    def is_link_local(self): ...
    @property
    def is_site_local(self): ...
    @property
    def is_private(self): ...
    @property
    def ipv4_mapped(self): ...
    @property
    def teredo(self): ...
    @property
    def sixtofour(self): ...

class IPv6Address(_BaseV6, _BaseIP):
    def __init__(self, address) -> None: ...

class IPv6Network(_BaseV6, _BaseNet):
    ip: Any
    netmask: Any
    iterhosts: Any
    def __init__(self, address, strict: bool = ...) -> None: ...
    @property
    def with_netmask(self): ...
