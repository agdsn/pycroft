# run with `pip install semgrep && semgrep --config=tools/semgrep.yml pycroft web`
# …or let `pre-commit` do the heavy lifting for you!
rules:
  - id: f-string-in-deferred-gettext
    pattern: pycroft.helpers.i18n.deferred_gettext(f"...")
    message: Don't use f-strings in `deferred_gettext`
    languages: [python]
    severity: ERROR

  - id: format-in-deferred-gettext
    patterns:
      - pattern: $GETTEXT_FN($MESSAGE.format($...ARGS))
      - metavariable-regex:
          metavariable: $GETTEXT_FN
          regex: (pycroft.helpers.i18n.)?deferred_gettext
    fix: $GETTEXT_FN($MESSAGE).format($...ARGS).to_json()
    message: Don't use formatted literals in `deferred_gettext`
    languages: [python]
    severity: ERROR

  - id: format-in-gettext
    patterns:
      - pattern: $GETTEXT_FN($MESSAGE.format($...ARGS))
      - metavariable-regex:
          metavariable: $GETTEXT_FN
          regex: (pycroft.helpers.i18n.)?gettext
    fix: $GETTEXT_FN($MESSAGE).format($...ARGS)
    message: Don't use formatted literals in `gettext`
    languages: [python]
    severity: ERROR

  - id: log-event-with-format
    patterns:
      - pattern: ("$MESSAGE".format($...ARGS))
      - pattern-inside: $LOG_FN(...)
      - metavariable-regex:
          metavariable: $LOG_FN
          regex: log_.*event
    message: Don't use $LOG_FN with a pre-formatted string literal. Use `deferred-gettext` instead.
    fix: deferred_gettext("$MESSAGE").format($...ARGS).to_json()
    languages: [python]
    severity: ERROR

  - id: log-event-with-f-string
    patterns:
      - pattern-either:
        - pattern: ("...".format($...ARGS))
        - pattern: (f"...")
      - pattern-inside: $LOG_FN(...)
      - metavariable-regex:
          metavariable: $LOG_FN
          regex: (pycroft.lib.logging.)?log_.*event
    message: |
      Don't use $LOG_FN with a pre-formatted string literal.
      Replace the message by `deferred_gettext(...).format(...).to_json()`.
    languages: [python]
    severity: ERROR

  - id: use-format-instead-of-strftime
    pattern: $DT.strftime("$FORMAT")
    message: Don't use strftime, use an f-string instead
    languages: [python]
    severity: WARNING
    fix: f"{$DT:$FORMAT}"

  - id: do-not-call-get-with-keywords
    pattern-either:
      - pattern: pycroft.model.$C.get(id=$ARG)
      - pattern: pycroft.model._all.$C.get(id=$ARG)
      - pattern: pycroft.model.$MODULE.$C.get(id=$ARG)
    message: don't use `$C.get()` with a keyword argument
    fix: $C.get($ARG)
    languages: [python]
    severity: ERROR

  - id: secure-name-for-password-fields
    patterns:
      - pattern: $FIELD = $CLASS($...ARGS)
      - pattern-inside: |
            class $FORMCLASS: ...
      - metavariable-pattern:
          metavariable: $CLASS
          pattern-either:
            - pattern: wtforms_widgets.fields.core.PasswordField
            - pattern: wtforms.fields.PasswordField
            - pattern: PasswordField
      - metavariable-pattern:
          metavariable: $FIELD
          patterns:
            - pattern-not-regex: (password|secret)
    message: $FIELD is not a secure name
    fix: secret_$FIELD = PasswordField($...ARGS)
    languages: [python]
    severity: ERROR

  - id: dont-use-datetimetz-in-migrations
    pattern-either:
      - pattern: pycroft.model.types.DateTimeTz()
    fix: sa.types.DateTime(timezone=True)
    message: use sqlalchemys own DateTime instead of DateTimeTz for migrations
    languages: [python]
    severity: ERROR
    paths:
      include:
        - "**/alembic/versions"

  - id: dont-use-models-in-migrations
    patterns:
      - pattern-either:
        - pattern: import pycroft
        - pattern: import pycroft.model
        - pattern: from pycroft import $FOO
        - pattern: from pycroft.model import $FOO
    message: |
      Don't use pycroft models or other code in migrations!
      The migrations must be able to run at any time regardless of how the code changes.
      Custom data types have to be replaced by their sqlalchemy qualifier as well.
    languages: [python]
    severity: ERROR
    paths:
      include:
        - "**/alembic/versions"

  - id: dont-use-models-in-helpers
    patterns:
      - pattern-either:
        - pattern: import pycroft
        - pattern: import pycroft.model
        - pattern: from pycroft import $FOO
        - pattern: from pycroft.model import $FOO
    message: |
      Don't use pycroft model code in the helpers!
      The helper modules should be self-contained,
      so they can be used by `pycroft.{model,lib}` or the web code,
      and not the other way around.
    languages: [python]
    severity: ERROR
    paths:
      include:
        - "pycroft/helpers"

  - id: dont-commit-session-in-tests
    pattern: session.commit()
    message: |
      Don't commit the session in tests.
      The pytest fixtures provide one long-running session with nested transactions.
      Since committing the session commits the transaction, a commit would make
      all the previous savepoints inaccessible (by implicitly committing _all_
      nested transactions), breaking the fixture reuse mechanism.
    fix: session.flush()
    languages: [python]
    severity: ERROR
    paths:
      include:
        - "tests"

  - id: prefer-back-populates-over-backref
    pattern: relationship(..., backref=sqlalchemy.orm.backref(...))
    message: |
      Don't use `backref=`, use `back_populates=` instead
      and explicitly define the backref relation on the target class,
      preferably in a comment block like `# backrefs … # /backrefs`.
      For further information, see the remark at
      https://docs.sqlalchemy.org/en/20/orm/backref.html.
    languages: [ python ]
    severity: ERROR
    paths:
      include:
        - "pycroft/model"

  - id: pydantic-models-set-default-for-optional
    patterns:
      - pattern: "$FIELD: $TYPE | None"
      - pattern-inside: "class $CLASS(pydantic.BaseModel): ..."
    fix: "$FIELD: $TYPE | None = None"
    message: |
      Use a default value (`= None`) for optional fields in pydantic models
    languages: [ python ]
    severity: ERROR
    paths:
      include: ["web"]

  - id: explicit-session-begin_nested
    patterns:
      - pattern: |
          with $CM: ...
      - metavariable-pattern:
          metavariable: "$CM"
          pattern: handle_errors($SESS, $...ARGS)
      - focus-metavariable: "$CM"
    message: "Use `session.begin` explicitly instead of passing the session to `handle_errors`"
    fix: |
      handle_errors($...ARGS), $SESS.begin_nested()
    languages: [python]
    severity: ERROR
    paths:
      include: ["web"]

  - id: commit-in-context-manager
    patterns:
      - pattern: |
          with $CM:
              $BODY
      - metavariable-pattern:
          metavariable: "$CM"
          pattern: $SESS.begin_nested()
      - metavariable-pattern:
          metavariable: "$BODY"
          pattern: |
              <... $SESS.commit() ...>
      - focus-metavariable: ["$CM", "$SESS"]
    message: "Don't commit the session in a `.begin_nested()` context manager"
    languages: [python]
    severity: ERROR
    paths:
      include: ["web", "pycroft"]

  - id: untyped-flask-endpount
    patterns:
      - pattern: |
          @$APP.route($...ROUTEARGS)
          def $EP($...ARGS): ...
      - pattern-not: |
          @$APP.route($...ROUTEARGS)
          def $EP($...ARGS) -> $RET: ...
      - focus-metavariable: "$EP"
    # no fix, because we would lose the decorator (and I can't make `pattern-inside` work correctly)
    message:  blueprint functions should be annotated with `ResponseReturnValue`
    languages: [ python ]
    severity: ERROR
    paths:
      include: ["web"]
